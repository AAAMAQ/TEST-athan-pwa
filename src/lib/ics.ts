// src/lib/ics.ts
export function downloadICS(filename: string, ics: string) {
  const blob = new Blob([ics], { type: 'text/calendar;charset=utf-8' })
  const url = URL.createObjectURL(blob)
  const a = document.createElement('a')
  a.href = url
  a.download = filename
  a.click()
  setTimeout(() => URL.revokeObjectURL(url), 0)
}

function fmt(date: Date) {
  const pad = (n: number) => n.toString().padStart(2, '0')
  const yyyy = date.getFullYear()
  const mm = pad(date.getMonth() + 1)
  const dd = pad(date.getDate())
  const hh = pad(date.getHours())
  const mi = pad(date.getMinutes())
  const ss = pad(date.getSeconds())
  return `${yyyy}${mm}${dd}T${hh}${mi}${ss}` // floating local time
}

type IcsItem = {
  title: string
  when: Date
  /** Minutes before the event to trigger a popup reminder (VALARM). Default 10. */
  remindMinutes?: number
  /** Optional custom text to append to SUMMARY (overrides default "(X min before)"). */
  summarySuffix?: string
}

export function buildIcsForDates(
  items: IcsItem[],
  name = 'Athan Reminders',
  groupId = 'ATHAN-PWA',
  defaultReminderMin = 10
) {
  const lines = [
    'BEGIN:VCALENDAR',
    'VERSION:2.0',
    `X-WR-CALNAME:${name}`,
    `X-WR-CALDESC:${name} — generated by Athan PWA`,
    'PRODID:-//Athan PWA//EN',
    'CALSCALE:GREGORIAN',
    'METHOD:PUBLISH'
  ]

  items.forEach((it, i) => {
    const start = fmt(it.when)
    const end = fmt(new Date(it.when.getTime() + 5 * 60 * 1000))
    const minutes = typeof it.remindMinutes === 'number' ? Math.max(0, Math.floor(it.remindMinutes)) : defaultReminderMin
    const uid = `${start}-${i}@${groupId}`
    const suffix = typeof it.summarySuffix === 'string' ? it.summarySuffix : `(${minutes} min before)`
    const summary = `${it.title}${suffix ? ` ${suffix}` : ''}`

    lines.push(
      'BEGIN:VEVENT',
      `UID:${uid}`,
      `DTSTAMP:${start}`,
      `DTSTART:${start}`,
      `DTEND:${end}`,
      `SUMMARY:${summary}`,
      `CATEGORIES:${groupId},Athan-PWA`,
      `X-ATHAN-GROUP:${groupId}`,
      'BEGIN:VALARM',
      `TRIGGER:-PT${minutes}M`,
      'ACTION:DISPLAY',
      `DESCRIPTION:${it.title}`,
      'END:VALARM',
      'END:VEVENT'
    )
  })

  lines.push('END:VCALENDAR')
  return lines.join('\r\n')
}

// ---------- Prayer-specific helpers ----------

export type DayPrayers = {
  fajr: Date
  sunrise: Date
  dhuhr: Date
  asr: Date
  maghrib: Date
  isha: Date
}

/**
 * Make exactly 11 entries for a day:
 *  6 base prayers: Fajr, Sunrise, Dhuhr, Asr, Maghrib, Isha
 *  4 before-next reminders: (Sunrise - offset), (Asr - offset), (Maghrib - offset), (Isha - offset)
 *  1 fixed Isha reminder at HH:mm if provided (e.g. "22:00")
 *
 * Rule: offset is clamped to at least 1 minute so reminder events never collide with the next prayer time.
 */
export function buildIcsForPrayerDay(
  day: DayPrayers,
  offsetMinInput: number,
  opts?: {
    /** Optional fixed local time (HH:mm) for a second Isha reminder, e.g., "22:00". */
    ishaFixedTime?: string
    /** Calendar name and group id for easier deletion. */
    name?: string
    groupId?: string
    /** Override default VALARM minutes for generated items (default 10). */
    defaultReminderMin?: number
  }
) {
  const name = opts?.name ?? 'Athan Reminders'
  const groupId = opts?.groupId ?? 'ATHAN-PWA'
  const defaultReminderMin = opts?.defaultReminderMin ?? 10

  const offsetMin = Math.max(1, Math.floor(offsetMinInput || 0)) // clamp to at least 1 min
  const minus = (d: Date, m: number) => new Date(d.getTime() - m * 60 * 1000)
  const items: IcsItem[] = []

  // 6 base prayers
  items.push(
    { title: 'Fajr', when: day.fajr },
    { title: 'Sunrise', when: day.sunrise },
    { title: 'Dhuhr', when: day.dhuhr },
    { title: 'Asr', when: day.asr },
    { title: 'Maghrib', when: day.maghrib },
    { title: 'Isha', when: day.isha }
  )

  // 4 reminders before NEXT prayer (scheduled at next prayer time minus offset)
  items.push(
    { title: `Fajr reminder before Sunrise (${offsetMin}m)`, when: minus(day.sunrise, offsetMin), remindMinutes: defaultReminderMin, summarySuffix: '' },
    { title: `Dhuhr reminder before Asr (${offsetMin}m)`, when: minus(day.asr, offsetMin), remindMinutes: defaultReminderMin, summarySuffix: '' },
    { title: `Asr reminder before Maghrib (${offsetMin}m)`, when: minus(day.maghrib, offsetMin), remindMinutes: defaultReminderMin, summarySuffix: '' },
    { title: `Maghrib reminder before Isha (${offsetMin}m)`, when: minus(day.isha, offsetMin), remindMinutes: defaultReminderMin, summarySuffix: '' }
  )

  // 1 fixed Isha reminder at a user time (e.g., "22:00")
  if (opts?.ishaFixedTime) {
    const [hh, mm] = opts.ishaFixedTime.split(':').map(n => parseInt(n, 10))
    if (Number.isFinite(hh) && Number.isFinite(mm)) {
      const ish = new Date(day.isha)
      ish.setHours(hh!, mm!, 0, 0)
      items.push({ title: 'Isha (custom reminder)', when: ish, remindMinutes: defaultReminderMin, summarySuffix: '' })
    }
  }

  // Exactly 11 entries/day now
  return buildIcsForDates(items, name, groupId, defaultReminderMin)
}

/** Build one ICS covering 7 consecutive days. */
export function buildIcsForWeek(
  days: DayPrayers[],
  offsetMinInput: number,
  opts?: {
    ishaFixedTime?: string
    name?: string
    groupId?: string
    defaultReminderMin?: number
  }
) {
  const name = opts?.name ?? 'Athan Reminders'
  const groupId = opts?.groupId ?? 'ATHAN-PWA'
  const defaultReminderMin = opts?.defaultReminderMin ?? 10
  const offsetMin = Math.max(1, Math.floor(offsetMinInput || 0))

  const chunks: string[] = []
  days.forEach((d) => {
    const single = buildIcsForPrayerDay(d, offsetMin, {
      ishaFixedTime: opts?.ishaFixedTime,
      name,
      groupId,
      defaultReminderMin
    })
    // strip VCALENDAR wrapper so we can merge events into one calendar
    const eventsBlock = single
      .split('\r\n')
      .filter(line =>
        line !== 'BEGIN:VCALENDAR' &&
        line !== 'END:VCALENDAR' &&
        !line.startsWith('VERSION') &&
        !line.startsWith('X-WR-CAL') &&
        !line.startsWith('PRODID') &&
        !line.startsWith('CALSCALE') &&
        !line.startsWith('METHOD')
      )
      .join('\r\n')
    chunks.push(eventsBlock)
  })

  const header = [
    'BEGIN:VCALENDAR',
    'VERSION:2.0',
    `X-WR-CALNAME:${name}`,
    `X-WR-CALDESC:${name} — generated by Athan PWA (7 days)`,
    'PRODID:-//Athan PWA//EN',
    'CALSCALE:GREGORIAN',
    'METHOD:PUBLISH'
  ].join('\r\n')

  return `${header}\r\n${chunks.join('\r\n')}\r\nEND:VCALENDAR`
}